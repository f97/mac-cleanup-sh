#!/usr/bin/env bash

set -E
trap cleanup SIGINT SIGTERM ERR EXIT

cleanup() {
	trap - SIGINT SIGTERM ERR EXIT
}

# Default arguments
update=false
vietnamese_apps=false

usage() {
	cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-u] [--vietnamese-apps]

A Mac Cleaning up Utility by fwartner
https://github.com/mac-cleanup/mac-cleanup-sh

Available options:

-h, --help       Print this help and exit
-d, --dry-run    Print approx space to be cleaned
-v, --verbose    Print script debug info
-u, --update     Run brew update
--vietnamese-apps Clean Vietnamese applications cache
EOF
	exit
}

# shellcheck disable=SC2034  # Unused variables left for readability
setup_colors() {
	if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
		NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
	else
		NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
	fi
}

msg() {
  if [ -z "$dry_run" ]; then
	  echo >&2 -e "${1-}"
	fi
}

die() {
	local msg=$1
	local code=${2-1} # default exit status 1
	msg "$msg"
	exit "$code"
}

parse_params() {
	# default values of variables set from params
	update=false
	vietnamese_apps=false

	while :; do
		case "${1-}" in
		-h | --help) usage ;;
		-v | --verbose) set -x ;;
		-d | --dry-run) dry_run=true ;;
		--no-color) NO_COLOR=1 ;;
		-u | --update) update=true ;; # update flag
		--vietnamese-apps) vietnamese_apps=true ;; # vietnamese apps cleanup flag
		-n) true ;;                   # This is a legacy option, now default behaviour
		-?*) die "Unknown option: $1" ;;
		*) break ;;
		esac
		shift
	done

	return 0
}

parse_params "$@"
setup_colors

deleteCaches() {
	local cacheName=$1
	shift
	local paths=("$@")
	echo "Initiating cleanup ${cacheName} cache..."
	for folderPath in "${paths[@]}"; do
		if [[ -d ${folderPath} ]]; then
			dirSize=$(du -hs "${folderPath}" | awk '{print $1}')
			echo "Deleting ${folderPath} to free up ${dirSize}..."
			rm -rfv "${folderPath}"
		fi
	done
}

bytesToHuman() {
	b=${1:-0}
	d=''
	s=1
	S=(Bytes {K,M,G,T,E,P,Y,Z}iB)
	while ((b > 1024)); do
		d="$(printf ".%02d" $((b % 1024 * 100 / 1024)))"
		b=$((b / 1024))
		((s++))
	done
	if [ -z "$dry_results" ]; then
    msg "$b$d ${S[$s]} of space was cleaned up"
  else
    msg "Approx $b$d ${S[$s]} of space will be cleaned up"
  fi
}

count_dry() {
  for path in "${path_list[@]}"; do
    if [ -d "$path" ] || [ -f "$path" ]; then
      temp_dry_results=$(sudo du -ck "$path" | tail -1 | awk '{ print $1 }')
      dry_results="$((dry_results+temp_dry_results))"
    fi
  done
}

remove_paths() {
  if [ -z "$dry_run" ]; then
    for path in "${path_list[@]}"; do
      rm -rfv "$path" &>/dev/null
    done
    unset path_list
  fi
}

collect_paths() {
  path_list+=("$@")
}

clean_vietnamese_apps() {
  # 🇻🇳 Cốc Cốc Browser cleanup
  if [ -d ~/Library/Application\ Support/Coccoc ]; then
    collect_paths ~/Library/Application\ Support/Coccoc/Default/Cache/*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/GPUCache/*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/Code\ Cache/*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/Media\ Cache/*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/Application\ Cache/*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/Session\ Storage/*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/Local\ Storage/*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/IndexedDB/*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/Web\ Data*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/History*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/Cookies*
    collect_paths ~/Library/Application\ Support/Coccoc/Default/Favicons*
    collect_paths ~/Library/Application\ Support/Coccoc/coccoc_crashpad_database/*
    msg 'Cleaning Cốc Cốc browser cache 🌐...'
    remove_paths
  fi

  # 💬 Zalo Desktop cleanup
  if [ -d ~/Library/Application\ Support/Zalo ]; then
    msg '⚠️  Cleaning Zalo cache may affect chat history loading speed'
    collect_paths ~/Library/Application\ Support/Zalo/Cache/*
    collect_paths ~/Library/Application\ Support/Zalo/GPUCache/*
    collect_paths ~/Library/Application\ Support/Zalo/Code\ Cache/*
    collect_paths ~/Library/Application\ Support/Zalo/Session\ Storage/*
    collect_paths ~/Library/Application\ Support/Zalo/Local\ Storage/*
    collect_paths ~/Library/Application\ Support/Zalo/IndexedDB/*
    collect_paths ~/Library/Application\ Support/Zalo/blob_storage/*
    collect_paths ~/Library/Application\ Support/Zalo/logs/*
    collect_paths ~/Library/Application\ Support/Zalo/Downloads/*
    collect_paths ~/Library/Application\ Support/Zalo/tmp/*
    msg 'Cleaning Zalo Desktop cache 💬...'
    remove_paths
  fi

  # 📺 VTV Go cleanup
  if [ -d ~/Library/Application\ Support/VTV\ Go ]; then
    collect_paths ~/Library/Application\ Support/VTV\ Go/Cache/*
    collect_paths ~/Library/Application\ Support/VTV\ Go/Media\ Cache/*
    msg 'Cleaning VTV Go cache 📺...'
    remove_paths
  fi

  # 🏦 Banking Apps cleanup
  if [ -d ~/Library/Application\ Support/VCB-Digibank ]; then
    collect_paths ~/Library/Application\ Support/VCB-Digibank/Cache/*
    msg 'Cleaning Vietcombank cache 🏦...'
    remove_paths
  fi

  if [ -d ~/Library/Application\ Support/BIDV\ SmartBanking ]; then
    collect_paths ~/Library/Application\ Support/BIDV\ SmartBanking/Cache/*
    msg 'Cleaning BIDV SmartBanking cache 🏦...'
    remove_paths
  fi

  if [ -d ~/Library/Application\ Support/Techcombank ]; then
    collect_paths ~/Library/Application\ Support/Techcombank/Cache/*
    msg 'Cleaning Techcombank cache 🏦...'
    remove_paths
  fi

  # 🎵 Music & Entertainment cleanup
  if [ -d ~/Library/Application\ Support/Zing\ MP3 ]; then
    collect_paths ~/Library/Application\ Support/Zing\ MP3/Cache/*
    msg 'Cleaning Zing MP3 cache 🎵...'
    remove_paths
  fi

  if [ -d ~/Library/Application\ Support/NhacCuaTui ]; then
    collect_paths ~/Library/Application\ Support/NhacCuaTui/Cache/*
    msg 'Cleaning NhacCuaTui cache 🎵...'
    remove_paths
  fi

  # 🛒 E-commerce Apps cleanup
  if [ -d ~/Library/Application\ Support/Shopee ]; then
    collect_paths ~/Library/Application\ Support/Shopee/Cache/*
    msg 'Cleaning Shopee cache 🛒...'
    remove_paths
  fi

  if [ -d ~/Library/Application\ Support/Lazada ]; then
    collect_paths ~/Library/Application\ Support/Lazada/Cache/*
    msg 'Cleaning Lazada cache 🛒...'
    remove_paths
  fi

  if [ -d ~/Library/Application\ Support/Tiki ]; then
    collect_paths ~/Library/Application\ Support/Tiki/Cache/*
    msg 'Cleaning Tiki cache 🛒...'
    remove_paths
  fi
}

# Ask for the administrator password upfront
sudo -v

HOST=$(whoami)

# Keep-alive sudo until `mac-cleanup.sh` has finished
while true; do
	sudo -n true
	sleep 60
	kill -0 "$$" || exit
done 2>/dev/null &

# Enable extended regex
shopt -s extglob

oldAvailable=$(df / | tail -1 | awk '{print $4}')

collect_paths /Volumes/*/.Trashes/*
collect_paths ~/.Trash/*
msg 'Emptying the Trash 🗑 on all mounted volumes and the main HDD...'
remove_paths

collect_paths /Library/Caches/*
collect_paths /System/Library/Caches/*
collect_paths ~/Library/Caches/*
collect_paths /private/var/folders/bh/*/*/*/*
msg 'Clearing System Cache Files...'
remove_paths

# Advanced System Files & Caches
collect_paths ~/Library/Caches/com.apple.QuickLook.thumbnailcache/*
collect_paths ~/.DS_Store
collect_paths ~/Desktop/.DS_Store
collect_paths ~/Documents/.DS_Store
collect_paths ~/Downloads/.DS_Store
collect_paths ~/Library/.DS_Store
collect_paths ~/Pictures/.DS_Store
collect_paths ~/Public/.DS_Store
collect_paths ~/Music/.DS_Store
collect_paths ~/Movies/.DS_Store
collect_paths /var/folders/*/*/.DS_Store
msg 'Clearing QuickLook thumbnails and .DS_Store files...'
remove_paths

collect_paths ~/Library/Caches/com.apple.ATS/*
collect_paths /Library/Caches/com.apple.ATS/*
collect_paths ~/Library/Caches/com.apple.iconservices.store
collect_paths ~/Library/Caches/locationd/*
msg 'Clearing font caches, icon services, and location services cache...'
remove_paths

# Core dumps and system installer logs
collect_paths /cores/*
collect_paths /var/log/install.log*
msg 'Clearing core dumps and system installer logs...'
remove_paths

collect_paths /private/var/log/asl/*.asl
collect_paths /Library/Logs/DiagnosticReports/*
collect_paths /Library/Logs/CreativeCloud/*
collect_paths /Library/Logs/Adobe/*
collect_paths /Library/Logs/adobegc.log
collect_paths ~/Library/Containers/com.apple.mail/Data/Library/Logs/Mail/*
collect_paths ~/Library/Logs/CoreSimulator/*
msg 'Clearing System Log Files...'
remove_paths

# Enhanced System Cleanup Areas
collect_paths /Library/Logs/CrashReporter/*
collect_paths ~/Library/Logs/CrashReporter/*
collect_paths /Library/Logs/DiagnosticReports/*
collect_paths ~/Library/Logs/DiagnosticReports/*
collect_paths /System/Library/Logs/*
collect_paths /var/log/install.log*
collect_paths /var/log/system.log*
msg 'Clearing System and Application Crash Reports...'
remove_paths

collect_paths ~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/*
collect_paths ~/Downloads/*/Attachments/*
collect_paths ~/Library/Mail/V*/MailData/Attachments/*
msg 'Clearing Mail Attachments and Downloads...'
remove_paths

collect_paths ~/Library/Caches/com.apple.QuickLook.thumbnailcache/*
collect_paths /private/var/folders/*/*/C/com.apple.QuickLook.thumbnailcache/*
msg 'Clearing QuickLook Thumbnails...'
remove_paths

collect_paths ~/.Spotlight-V100/*
collect_paths /private/var/db/Spotlight-V100/*
collect_paths ~/Library/Metadata/CoreSpotlight/*
msg 'Clearing Spotlight Indexing Cache...'
remove_paths

collect_paths ~/Library/Caches/com.apple.ATS/*
collect_paths /Library/Caches/com.apple.ATS/*
collect_paths /System/Library/Caches/com.apple.coreservices.CacheServices/*
msg 'Clearing Font Caches...'
remove_paths

collect_paths ~/Library/Caches/com.apple.IconServices.store
collect_paths /Library/Caches/com.apple.iconservices.store
msg 'Clearing Icon Caches...'
remove_paths

collect_paths ~/Library/Caches/com.apple.helpd/*
collect_paths ~/Library/Caches/com.apple.preferencepanes.usercache/*
collect_paths ~/Library/Caches/CloudKit/*
collect_paths ~/Library/Caches/com.apple.bird/*
collect_paths ~/Library/Caches/GeoServices/*
collect_paths ~/Library/Caches/com.apple.nsurlsessiond/*
msg 'Clearing Enhanced User Cache Directories...'
remove_paths

collect_paths /private/var/log/wifi.log*
collect_paths /Library/Logs/WindowServer/*
collect_paths ~/Library/Logs/com.apple.dt.XCPlatform/*
collect_paths /var/log/asl.log*
collect_paths /var/log/commerce.log*
msg 'Clearing Additional System Logs...'
remove_paths

collect_paths ~/Library/Caches/Temporary\ Internet\ Files/*
collect_paths ~/Library/Caches/TemporaryItems/*
collect_paths /private/tmp/TM*
collect_paths /private/var/tmp/TM*
msg 'Clearing Temporary Internet Files...'
remove_paths

if [ -d ~/Library/Logs/JetBrains/ ]; then
  collect_paths ~/Library/Logs/JetBrains/*/
  msg 'Clearing all application log files from JetBrains...'
  remove_paths
fi

# Code Editors & IDEs cleanup
if [ -d ~/Library/Caches/JetBrains/ ]; then
  collect_paths ~/Library/Caches/JetBrains/*/
  msg 'Clearing IntelliJ and JetBrains IDEs caches...'
  remove_paths
fi

if [ -d ~/.vscode/ ]; then
  collect_paths ~/.vscode/extensions/*/node_modules/*
  msg 'Clearing VSCode extensions node_modules...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Sublime\ Text/ ]; then
  collect_paths ~/Library/Application\ Support/Sublime\ Text/*/Cache/*
  collect_paths ~/Library/Application\ Support/Sublime\ Text/*/Local/*
  msg 'Clearing Sublime Text cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Cursor/ ]; then
  collect_paths ~/Library/Application\ Support/Cursor/Cache/*
  collect_paths ~/Library/Application\ Support/Cursor/Code\ Cache/*
  msg 'Clearing Cursor cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/com.panic.Nova/ ]; then
  collect_paths ~/Library/Application\ Support/com.panic.Nova/cache/*
  msg 'Clearing Nova cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Adobe/ ]; then
  collect_paths ~/Library/Application\ Support/Adobe/Common/Media\ Cache\ Files/*
  collect_paths ~/Library/Application\ Support/Adobe/Common/Media\ Cache/*
  collect_paths ~/Library/Application\ Support/Adobe/*/cache/*
  msg 'Clearing Adobe Cache Files...'
  remove_paths
fi

# Professional Apps cleanup
if [ -d ~/Library/Application\ Support/Final\ Cut\ Pro/ ]; then
  collect_paths ~/Library/Application\ Support/Final\ Cut\ Pro/cache/*
  msg 'Clearing Final Cut Pro cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Logic/ ]; then
  collect_paths ~/Library/Application\ Support/Logic/cache/*
  msg 'Clearing Logic Pro cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/com.bohemiancoding.sketch3/ ]; then
  collect_paths ~/Library/Application\ Support/com.bohemiancoding.sketch3/cache/*
  msg 'Clearing Sketch cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Figma/ ]; then
  collect_paths ~/Library/Application\ Support/Figma/Desktop/cache/*
  collect_paths ~/Library/Application\ Support/Figma/Desktop/Code\ Cache/*
  msg 'Clearing Figma desktop cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Canva/ ]; then
  collect_paths ~/Library/Application\ Support/Canva/cache/*
  msg 'Clearing Canva cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Google/Chrome/ ]; then
  collect_paths ~/Library/Application\ Support/Google/Chrome/Default/Application\ Cache/*
  collect_paths ~/Library/Application\ Support/Google/Chrome/Crashpad/*
  msg 'Clearing Google Chrome Cache Files and Crash Dumps...'
  remove_paths
fi

# Advanced Browser Data Cleanup
if [ -d ~/Library/Safari/ ]; then
  collect_paths ~/Library/Safari/Downloads.plist
  collect_paths ~/Library/Safari/WebsiteData/*
  msg 'Clearing Safari downloads and website data...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Firefox/ ]; then
  collect_paths ~/Library/Application\ Support/Firefox/Crash\ Reports/*
  msg 'Clearing Firefox crash reports...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Microsoft\ Edge/ ]; then
  collect_paths ~/Library/Application\ Support/Microsoft\ Edge/Default/Cache/*
  collect_paths ~/Library/Application\ Support/Microsoft\ Edge/Default/Code\ Cache/*
  msg 'Clearing Microsoft Edge cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/com.operasoftware.Opera/ ]; then
  collect_paths ~/Library/Application\ Support/com.operasoftware.Opera/Cache/*
  collect_paths ~/Library/Application\ Support/com.operasoftware.Opera/Code\ Cache/*
  msg 'Clearing Opera cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/BraveSoftware/ ]; then
  collect_paths ~/Library/Application\ Support/BraveSoftware/Brave-Browser/Default/Cache/*
  collect_paths ~/Library/Application\ Support/BraveSoftware/Brave-Browser/Default/Code\ Cache/*
  msg 'Clearing Brave browser cache...'
  remove_paths
fi

# Vietnamese Apps Cleanup (only when flag is enabled)
if [ "$vietnamese_apps" = true ]; then
  clean_vietnamese_apps
fi

# Enhanced Browser Cache Cleanup
if [ -d ~/Library/Safari/ ]; then
  collect_paths ~/Library/Safari/LocalStorage/*
  collect_paths ~/Library/Safari/Databases/*
  collect_paths ~/Library/Safari/WebKitCache/*
  collect_paths ~/Library/Caches/com.apple.Safari/*
  collect_paths ~/Library/Caches/Safari/*
  msg 'Clearing Safari Cache Files...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Firefox/ ]; then
  collect_paths ~/Library/Application\ Support/Firefox/Profiles/*/cache2/*
  collect_paths ~/Library/Application\ Support/Firefox/Profiles/*/startupCache/*
  collect_paths ~/Library/Application\ Support/Firefox/Profiles/*/OfflineCache/*
  collect_paths ~/Library/Caches/Firefox/*
  msg 'Clearing Firefox Cache Files...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Microsoft\ Edge/ ]; then
  collect_paths ~/Library/Application\ Support/Microsoft\ Edge/Default/Application\ Cache/*
  collect_paths ~/Library/Application\ Support/Microsoft\ Edge/Default/Cache/*
  collect_paths ~/Library/Application\ Support/Microsoft\ Edge/Default/Code\ Cache/*
  collect_paths ~/Library/Caches/com.microsoft.edgemac/*
  msg 'Clearing Microsoft Edge Cache Files...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/com.operasoftware.Opera/ ]; then
  collect_paths ~/Library/Application\ Support/com.operasoftware.Opera/Cache/*
  collect_paths ~/Library/Application\ Support/com.operasoftware.Opera/Application\ Cache/*
  collect_paths ~/Library/Caches/com.operasoftware.Opera/*
  msg 'Clearing Opera Cache Files...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/BraveSoftware/Brave-Browser/ ]; then
  collect_paths ~/Library/Application\ Support/BraveSoftware/Brave-Browser/Default/Application\ Cache/*
  collect_paths ~/Library/Application\ Support/BraveSoftware/Brave-Browser/Default/Cache/*
  collect_paths ~/Library/Application\ Support/BraveSoftware/Brave-Browser/Default/Code\ Cache/*
  collect_paths ~/Library/Caches/BraveSoftware/*
  msg 'Clearing Brave Browser Cache Files...'
  remove_paths
fi

collect_paths ~/Music/iTunes/iTunes\ Media/Mobile\ Applications/*
msg 'Cleaning up iOS Applications...'
remove_paths

collect_paths ~/Library/Application\ Support/MobileSync/Backup/*
msg 'Removing iOS Device Backups...'
remove_paths

collect_paths ~/Library/Developer/Xcode/DerivedData/*
collect_paths ~/Library/Developer/Xcode/Archives/*
collect_paths ~/Library/Developer/Xcode/iOS Device Logs/*
msg 'Cleaning up XCode Derived Data and Archives...'
remove_paths

if type "xcrun" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up iOS Simulators...'
    osascript -e 'tell application "com.apple.CoreSimulator.CoreSimulatorService" to quit' &>/dev/null
    osascript -e 'tell application "iOS Simulator" to quit' &>/dev/null
    osascript -e 'tell application "Simulator" to quit' &>/dev/null
    xcrun simctl shutdown all &>/dev/null
    xcrun simctl erase all &>/dev/null
  else
    collect_paths ~/Library/Developer/CoreSimulator/Devices/*/data/!(Library|var|tmp|Media)
    collect_paths /Users/wah/Library/Developer/CoreSimulator/Devices/*/data/Library/!(PreferencesCaches|Caches|AddressBook)
    collect_paths ~/Library/Developer/CoreSimulator/Devices/*/data/Library/Caches/*
    collect_paths ~/Library/Developer/CoreSimulator/Devices/*/data/Library/AddressBook/AddressBook*
  fi
fi

# Extended iOS/Mobile Development cleanup
collect_paths ~/Library/Developer/Xcode/iOS\ DeviceSupport/*
collect_paths ~/Library/Developer/CoreSimulator/Profiles/Runtimes/*
collect_paths ~/Library/Developer/Xcode/UserData/*
collect_paths ~/Library/Group\ Containers/*/Library/Caches/*
msg 'Clearing iOS device support files and user data...'
remove_paths

# support deleting Dropbox Cache if they exist
if [ -d "/Users/${HOST}/Dropbox" ]; then
  collect_paths ~/Dropbox/.dropbox.cache/*
  msg 'Clearing Dropbox 📦 Cache Files...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Google/DriveFS/ ]; then
  collect_paths ~/Library/Application\ Support/Google/DriveFS/[0-9a-zA-Z]*/content_cache
  msg 'Clearing Google Drive File Stream Cache Files...'
  killall "Google Drive File Stream"
  remove_paths
fi

if type "composer" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up composer...'
    composer clearcache --no-interaction &>/dev/null
    composer clear-cache --no-interaction &>/dev/null || true
  else
    collect_paths ~/Library/Caches/composer/*
    collect_paths ~/.composer/cache/*
    collect_paths ~/.cache/composer/*
  fi
fi

# Deletes Steam caches, logs, and temp files
# -Astro
if [ -d ~/Library/Application\ Support/Steam/ ]; then
  collect_paths ~/Library/Application\ Support/Steam/appcache
  collect_paths ~/Library/Application\ Support/Steam/depotcache
  collect_paths ~/Library/Application\ Support/Steam/logs
  collect_paths ~/Library/Application\ Support/Steam/steamapps/shadercache
  collect_paths ~/Library/Application\ Support/Steam/steamapps/temp
  collect_paths ~/Library/Application\ Support/Steam/steamapps/download
  collect_paths ~/Library/Application\ Support/Steam/steamapps/workshop/*
  msg 'Clearing Steam Cache, Log, and Temp Files...'
  remove_paths
fi

# Gaming & Entertainment cleanup
if [ -d ~/Library/Application\ Support/discord/ ]; then
  collect_paths ~/Library/Application\ Support/discord/Cache/*
  collect_paths ~/Library/Application\ Support/discord/Code\ Cache/*
  msg 'Clearing Discord cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Spotify/ ]; then
  collect_paths ~/Library/Application\ Support/Spotify/PersistentCache/*
  msg 'Clearing Spotify cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/org.videolan.vlc/ ]; then
  collect_paths ~/Library/Application\ Support/org.videolan.vlc/cache/*
  msg 'Clearing VLC cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/com.colliderli.iina/ ]; then
  collect_paths ~/Library/Application\ Support/com.colliderli.iina/cache/*
  msg 'Clearing IINA cache...'
  remove_paths
fi

# Deletes Minecraft logs
# -Astro
if [ -d ~/Library/Application\ Support/minecraft ]; then
  collect_paths ~/Library/Application\ Support/minecraft/logs
  collect_paths ~/Library/Application\ Support/minecraft/crash-reports
  collect_paths ~/Library/Application\ Support/minecraft/webcache
  collect_paths ~/Library/Application\ Support/minecraft/webcache2
  collect_paths ~/Library/Application\ Support/minecraft/crash-reports
  collect_paths ~/Library/Application\ Support/minecraft/*.log
  collect_paths ~/Library/Application\ Support/minecraft/launcher_cef_log.txt
  if [ -d ~/Library/Application\ Support/minecraft/.mixin.out ]; then
    collect_paths ~/Library/Application\ Support/minecraft/.mixin.out
  fi
  msg 'Clearing Minecraft Cache and Log Files...'
  remove_paths
fi

# Deletes Lunar Client logs (Minecraft alternate client)
# -Astro
if [ -d ~/.lunarclient ]; then
  collect_paths ~/.lunarclient/game-cache
  collect_paths ~/.lunarclient/launcher-cache
  collect_paths ~/.lunarclient/logs
  collect_paths ~/.lunarclient/offline/*/logs
  collect_paths ~/.lunarclient/offline/files/*/logs
  msg 'Deleting Lunar Client logs and caches...'
  remove_paths
fi

# Deletes Wget logs
# -Astro
if [ -d ~/wget-log ]; then
  collect_paths ~/wget-log
  collect_paths ~/.wget-hsts
  msg 'Deleting Wget log and hosts file...'
  remove_paths
fi

# Deletes Cacher logs
# I dunno either
# -Astro
if [ -d ~/.cacher ]; then
  collect_paths ~/.cacher/logs
  msg 'Deleting Cacher logs...'
  remove_paths
fi

# Deletes Android (studio?) cache
# -Astro
if [ -d ~/.android ]; then
  collect_paths ~/.android/cache
  msg 'Deleting Android cache...'
  remove_paths
fi

# Clears Gradle caches
# -Astro
if [ -d ~/.gradle ]; then
  collect_paths ~/.gradle/caches
  msg 'Clearing Gradle caches...'
  remove_paths
fi

# Deletes Kite Autocomplete logs
# -Astro
if [ -d ~/.kite ]; then
  collect_paths ~/.kite/logs
  msg 'Deleting Kite logs...'
  remove_paths
fi

if type "brew" &>/dev/null; then
  if [ "$update" = true ]; then
    msg 'Updating Homebrew Recipes...'
    brew update &>/dev/null
    msg 'Upgrading and removing outdated formulae...'
    brew upgrade &>/dev/null
  fi
  collect_paths "$(brew --cache)"
  msg 'Cleaning up Homebrew Cache...'
  if [ -z "$dry_run" ]; then
    brew cleanup -s &>/dev/null
    remove_paths
    brew tap --repair &>/dev/null
  else
    remove_paths
  fi
fi

if type "gem" &>/dev/null; then  # TODO add count_dry
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up any old versions of gems'
    gem cleanup &>/dev/null
  fi
fi

if type "docker" &>/dev/null; then  # TODO add count_dry
  if [ -z "$dry_run" ]; then
    if ! docker ps >/dev/null 2>&1; then
      close_docker=true
      open --background -a Docker
    fi
    msg 'Cleaning up Docker'
    docker system prune -af &>/dev/null
    if [ "$close_docker" = true ]; then
      killall Docker
    fi
  fi
fi

if [ "$PYENV_VIRTUALENV_CACHE_PATH" ]; then
  collect_paths "$PYENV_VIRTUALENV_CACHE_PATH"
  msg 'Removing Pyenv-VirtualEnv Cache...'
  remove_paths
fi

if type "npm" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up npm cache...'
    npm cache clean --force &>/dev/null
  else
    collect_paths ~/.npm/*
  fi
fi

if type "yarn" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up Yarn Cache...'
    yarn cache clean --force &>/dev/null
  else
    collect_paths ~/Library/Caches/yarn
  fi
fi

if type "pnpm" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up pnpm Cache...'
    pnpm store prune &>/dev/null
  else
    collect_paths ~/.pnpm-store/*
  fi
fi

if type "pod" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up Pod Cache...'
    pod cache clean --all &>/dev/null
  else
    collect_paths ~/Library/Caches/CocoaPods
  fi
fi

if type "go" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Clearing Go module cache...'
    go clean -modcache &>/dev/null
  else
    if [ -n "$GOPATH" ]; then
      collect_paths "$GOPATH/pkg/mod"
    else
      collect_paths ~/go/pkg/mod
    fi
  fi
fi

# Extended Development Tools cleanup
if [ -d ~/.cargo/ ]; then
  collect_paths ~/.cargo/registry/cache/*
  msg 'Clearing Rust cargo cache...'
  remove_paths
fi

if [ -d ~/Library/Caches/pip/ ]; then
  collect_paths ~/Library/Caches/pip/*
  msg 'Clearing Python pip cache...'
  remove_paths
fi

if [ -d ~/.gem/ ]; then
  collect_paths ~/.gem/cache/*
  msg 'Clearing Ruby gems cache...'
  remove_paths
fi

if [ -d ~/.m2/ ]; then
  collect_paths ~/.m2/repository/.cache/*
  msg 'Clearing Maven repository cache...'
  remove_paths
fi

if [ -d ~/.composer/ ]; then
  collect_paths ~/.composer/cache/*
  msg 'Clearing PHP Composer cache...'
  remove_paths
fi

if [ -d ~/Library/Caches/org.R-project.R/ ]; then
  collect_paths ~/Library/Caches/org.R-project.R/*
  msg 'Clearing R packages cache...'
  remove_paths
fi

if [ -d ~/miniconda3/pkgs/ ]; then
  collect_paths ~/miniconda3/pkgs/*
  msg 'Clearing Conda packages cache...'
  remove_paths
fi

# Enhanced Developer Tools Cleanup
if type "cargo" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up Rust cargo cache...'
    cargo cache --autoclean &>/dev/null || true
  else
    collect_paths ~/.cargo/registry/cache/*
    collect_paths ~/.cargo/registry/src/*
    collect_paths ~/.cargo/git/db/*
  fi
fi

if type "pip" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up Python pip cache...'
    pip cache purge &>/dev/null || true
  else
    collect_paths ~/Library/Caches/pip/*
    collect_paths ~/.cache/pip/*
  fi
fi

if type "mvn" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Cleaning up Maven cache...'
    mvn dependency:purge-local-repository -DactTransitively=false -DreResolve=false &>/dev/null || true
  else
    collect_paths ~/.m2/repository/*
  fi
fi

if type "gradle" &>/dev/null; then
  if [ -z "$dry_run" ]; then
    msg 'Stopping Gradle daemons and cleaning cache...'
    gradle --stop &>/dev/null || true
    gradle cleanBuildCache &>/dev/null || true
  else
    collect_paths ~/.gradle/caches/*
    collect_paths ~/.gradle/daemon/*
  fi
fi

# Deletes all Microsoft Teams Caches and resets it to default - can fix also some performance issues
# -Astro
if [ -d ~/Library/Application\ Support/Microsoft/Teams ]; then
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/IndexedDB
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/Cache
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/Application\ Cache
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/Code\ Cache
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/blob_storage
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/databases
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/gpucache
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/Local\ Storage
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/tmp
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/*logs*.txt
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/watchdog
  collect_paths ~/Library/Application\ Support/Microsoft/Teams/*watchdog*.json
  msg 'Deleting Microsoft Teams logs and caches...'
  remove_paths
fi

# Communication Apps cleanup
if [ -d ~/Library/Application\ Support/Slack/ ]; then
  collect_paths ~/Library/Application\ Support/Slack/Cache/*
  collect_paths ~/Library/Application\ Support/Slack/Code\ Cache/*
  msg 'Clearing Slack cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/zoom.us/ ]; then
  collect_paths ~/Library/Application\ Support/zoom.us/cache/*
  collect_paths ~/Library/Application\ Support/zoom.us/logs/*
  msg 'Clearing Zoom cache and logs...'
fi

# Enhanced Application Cache Cleanup
if [ -d ~/Library/Application\ Support/Code/ ]; then
  collect_paths ~/Library/Application\ Support/Code/logs/*
  collect_paths ~/Library/Application\ Support/Code/CachedData/*
  collect_paths ~/Library/Application\ Support/Code/CachedExtensions/*
  msg 'Clearing VSCode Cache and Logs...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Cursor/ ]; then
  collect_paths ~/Library/Application\ Support/Cursor/logs/*
  collect_paths ~/Library/Application\ Support/Cursor/CachedData/*
  collect_paths ~/Library/Application\ Support/Cursor/CachedExtensions/*
  msg 'Clearing Cursor Cache and Logs...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Slack/ ]; then
  collect_paths ~/Library/Application\ Support/Slack/Cache/*
  collect_paths ~/Library/Application\ Support/Slack/Code\ Cache/*
  collect_paths ~/Library/Application\ Support/Slack/logs/*
  collect_paths ~/Library/Application\ Support/Slack/Service\ Worker/CacheStorage/*
  msg 'Clearing Slack Cache and Logs...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/discord/ ]; then
  collect_paths ~/Library/Application\ Support/discord/Cache/*
  collect_paths ~/Library/Application\ Support/discord/Code\ Cache/*
  collect_paths ~/Library/Application\ Support/discord/GPUCache/*
  collect_paths ~/Library/Application\ Support/discord/logs/*
  msg 'Clearing Discord Cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Spotify/ ]; then
  collect_paths ~/Library/Application\ Support/Spotify/PersistentCache/*
  collect_paths ~/Library/Caches/com.spotify.client/*
  msg 'Clearing Spotify Cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/WhatsApp/ ]; then
  collect_paths ~/Library/Application\ Support/WhatsApp/Cache/*
  msg 'Clearing WhatsApp cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Telegram\ Desktop/ ]; then
  collect_paths ~/Library/Application\ Support/Telegram\ Desktop/cache/*
  collect_paths ~/Library/Application\ Support/Telegram\ Desktop/logs/*
  msg 'Clearing Telegram Desktop cache and logs...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Telegram/ ]; then
  collect_paths ~/Library/Application\ Support/Telegram/tdata/user_data/*
  collect_paths ~/Library/Application\ Support/Telegram/tdata/temp/*
  collect_paths ~/Library/Caches/ru.keepcoder.Telegram/*
  msg 'Clearing Telegram Cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Figma/ ]; then
  collect_paths ~/Library/Application\ Support/Figma/Cache/*
  collect_paths ~/Library/Application\ Support/Figma/Code\ Cache/*
  collect_paths ~/Library/Application\ Support/Figma/logs/*
  msg 'Clearing Figma Cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Postman/ ]; then
  collect_paths ~/Library/Application\ Support/Postman/Cache/*
  collect_paths ~/Library/Application\ Support/Postman/Code\ Cache/*
  collect_paths ~/Library/Application\ Support/Postman/logs/*
  msg 'Clearing Postman Cache...'
  remove_paths
fi

# Generic Electron Apps Cache Cleanup
for electron_app in ~/Library/Application\ Support/*/; do
  if [ -d "$electron_app/Cache" ] && [ -d "$electron_app/Code Cache" ]; then
    app_name=$(basename "$electron_app")
    # Skip apps we've already handled specifically
    case "$app_name" in
      Code|Cursor|Slack|discord|Spotify|WhatsApp|Telegram|Figma|Postman|Microsoft)
        continue
        ;;
    esac
    collect_paths "$electron_app/Cache/*"
    collect_paths "$electron_app/Code Cache/*"
    collect_paths "$electron_app/GPUCache/*"
    msg "Clearing $app_name (Electron App) Cache..."
    remove_paths
  fi
done

# Deletes Poetry cache
if [ -d ~/Library/Caches/pypoetry ]; then
  collect_paths ~/Library/Caches/pypoetry
  msg 'Deleting Poetry cache...'
  remove_paths
fi

# Removes Java heap dumps
collect_paths ~/*.hprof
msg 'Deleting Java heap dumps...'
remove_paths

# Database & Servers cleanup
if [ -d /usr/local/var/log/mongodb/ ]; then
  collect_paths /usr/local/var/log/mongodb/*
  msg 'Clearing MongoDB logs...'
  remove_paths
fi

if [ -d /usr/local/var/log/postgresql@*/ ]; then
  collect_paths /usr/local/var/log/postgresql@*/*
  msg 'Clearing PostgreSQL logs...'
  remove_paths
fi

if [ -d /usr/local/var/mysql/ ]; then
  collect_paths /usr/local/var/mysql/*.log
  msg 'Clearing MySQL logs...'
  remove_paths
fi

if [ -f /usr/local/var/log/redis.log ]; then
  collect_paths /usr/local/var/log/redis.log
  msg 'Clearing Redis logs...'
  remove_paths
fi

if [ -d /usr/local/var/lib/elasticsearch/ ]; then
  collect_paths /usr/local/var/lib/elasticsearch/logs/*
  msg 'Clearing Elasticsearch logs...'
  remove_paths
fi

# Cloud Storage cleanup
if [ -d ~/Library/Application\ Support/OneDrive/ ]; then
  collect_paths ~/Library/Application\ Support/OneDrive/cache/*
  collect_paths ~/Library/Application\ Support/OneDrive/logs/*
  msg 'Clearing OneDrive cache and logs...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Box/ ]; then
  collect_paths ~/Library/Application\ Support/Box/Box\ Edit/cache/*
  msg 'Clearing Box cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/pCloud\ Drive/ ]; then
  collect_paths ~/Library/Application\ Support/pCloud\ Drive/cache/*
  msg 'Clearing pCloud cache...'
  remove_paths
fi

if [ -d ~/Library/Application\ Support/Sync/ ]; then
  collect_paths ~/Library/Application\ Support/Sync/cache/*
  msg 'Clearing Sync.com cache...'
  remove_paths
fi

# Security & Privacy cleanup
collect_paths ~/Library/Logs/CoreData.log
collect_paths ~/Library/Logs/DiagnosticReports/*
collect_paths ~/Library/Application\ Support/CrashReporter/*
collect_paths ~/Library/Application\ Support/*/Analytics/*
collect_paths ~/Library/Application\ Support/*/Statistics/*
msg 'Clearing security logs, crash reports, and analytics data...'
remove_paths

# System Optimization commands (run only when not in dry-run mode)
if [ -z "$dry_run" ]; then
  msg 'Rebuilding LaunchServices database...'
  /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user &>/dev/null
  
  msg 'Clearing quarantine attributes from Downloads...'
  xattr -dr com.apple.quarantine ~/Downloads/ &>/dev/null 2>&1 || true
  
  msg 'Clearing font cache...'
  atsutil databases -remove &>/dev/null 2>&1 || true
fi

# System Optimization Features
if [ -z "$dry_run" ]; then
  msg 'Rebuilding Launch Services database...'
  /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user &>/dev/null || true
fi

if [ -z "$dry_run" ]; then
  msg 'Clearing download quarantine attributes...'
  find ~/Downloads -name "*.app" -exec xattr -d -r com.apple.quarantine {} \; &>/dev/null || true
  find ~/Downloads -name "*.dmg" -exec xattr -d com.apple.quarantine {} \; &>/dev/null || true
  find ~/Downloads -name "*.zip" -exec xattr -d com.apple.quarantine {} \; &>/dev/null || true
fi

# Clear sleep image if safe (only if more than 8GB RAM)
if [ -z "$dry_run" ]; then
  total_ram=$(sysctl -n hw.memsize)
  ram_gb=$((total_ram / 1024 / 1024 / 1024))
  if [ $ram_gb -gt 8 ]; then
    msg 'Clearing sleep image (hibernation file)...'
    sudo pmset -a hibernatemode 0 &>/dev/null || true
    sudo rm -f /private/var/vm/sleepimage &>/dev/null || true
    sudo pmset -a hibernatemode 3 &>/dev/null || true
  fi
fi

if [ -z "$dry_run" ]; then
  msg 'Cleaning up DNS cache...'
  sudo dscacheutil -flushcache &>/dev/null
  sudo killall -HUP mDNSResponder &>/dev/null
fi

# Optional network cache reset (uncomment to enable)
# if [ -z "$dry_run" ]; then
#   msg 'Resetting network settings cache...'
#   sudo ifconfig en0 down &>/dev/null || true
#   sudo ifconfig en0 up &>/dev/null || true
#   sudo route -n flush &>/dev/null || true
# fi

if [ -z "$dry_run" ]; then
  msg 'Purging inactive memory...'
  sudo purge &>/dev/null
fi

# Disables extended regex
shopt -u extglob

if [ -z "$dry_run" ]; then
  msg "${GREEN}Success!${NOFORMAT}"

  newAvailable=$(df / | tail -1 | awk '{print $4}')
  count=$((newAvailable - oldAvailable))
  bytesToHuman $count
  cleanup
else
  count_dry
  unset dry_run
  bytesToHuman "$dry_results"
  msg "Continue? [enter]"
  read -r -s -n 1 clean_dry_run
  if [[ $clean_dry_run = "" ]]; then
    if [ "$update" = true ]; then
      exec "$0" --update
    else
      exec "$0"
    fi
  fi
  cleanup
fi
